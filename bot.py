from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from cryptography.fernet import Fernet
import sqlite3
import asyncio
from config_ready import config

bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher()

key = Fernet.generate_key()
cipher = Fernet(key)

conn = sqlite3.connect('clanguard.db')
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS members 
                  (user_id INTEGER PRIMARY KEY, username TEXT, trust_level INTEGER)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS coords
                  (id INTEGER PRIMARY KEY, name TEXT, coords TEXT, access_level INTEGER)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS blacklist
                  (user_id INTEGER PRIMARY KEY, nickname TEXT, reason TEXT)''')
conn.commit()

@dp.message(Command("start"))
async def start(message: Message):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="–ø–æ—Å—Ç—Ä–æ–π–∫–∏", callback_data="button1"),
        types.InlineKeyboardButton(text="—Å–æ—Ü—Å–µ—Ç–∏", callback_data="button2"),
        types.InlineKeyboardButton(text="–ù–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤", callback_data="button3"),
        types.InlineKeyboardButton(text="ClanGuard", callback_data="clanguard_menu")
    )
    await message.answer("–¢—ã–∫–∞–π", reply_markup=builder.as_markup())

@dp.message(Command("ban"))
async def ban_player(message: Message, command: CommandObject):
    if not message.reply_to_message:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å.")
        return

    try:
        user = message.reply_to_message.from_user
        reason = command.args if command.args else "–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã"

        cursor.execute("INSERT OR REPLACE INTO blacklist (user_id, nickname, reason) VALUES (?, ?, ?)", 
                      (user.id, user.username, reason))
        conn.commit()

        try:
            await bot.ban_chat_member(
                chat_id=message.chat.id,
                user_id=user.id
            )
            ban_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.id} –∑–∞–±–∞–Ω–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°. –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        except Exception as kick_error:
            ban_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°, –Ω–æ –Ω–µ —É–¥–∞–ª—ë–Ω –∏–∑ —á–∞—Ç–∞. –û—à–∏–±–∫–∞: {kick_error}"
        
        await message.answer(ban_text)
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("unban"))
async def unban_player(message: Message, command: CommandObject):
    if not command.args:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        return

    try:
        user_identifier = command.args.strip()

        if user_identifier.isdigit():
            cursor.execute("SELECT * FROM blacklist WHERE user_id = ?", (int(user_identifier),))
        else:
            cursor.execute("SELECT * FROM blacklist WHERE nickname = ?", (user_identifier,))

        user = cursor.fetchone()

        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
            return

        cursor.execute("DELETE FROM blacklist WHERE user_id = ?", (user[0],))
        conn.commit()

        try:
            await bot.unban_chat_member(
                chat_id=message.chat.id,
                user_id=user[0]
            )
            unban_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_identifier} —Ä–∞–∑–±–∞–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –ß–°."
        except Exception as unban_error:
            unban_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_identifier} —É–¥–∞–ª–µ–Ω –∏–∑ –ß–°, –Ω–æ –Ω–µ —Ä–∞–∑–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ. –û—à–∏–±–∫–∞: {unban_error}"

        await message.answer(unban_text)

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("blacklist"))
async def show_blacklist(message: Message):
    cursor.execute("SELECT user_id, nickname, reason FROM blacklist")
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ß–° –ø—É—Å—Ç")
        return
    result = "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n" + "\n".join(
        f"ID: {row[0]} (@{row[1] or '–±–µ–∑ –Ω–∏–∫–∞'}) ‚Äî {row[2]}" for row in rows
    )
    await message.answer(result)

@dp.message(Command("add_member"))
async def add_member(message: Message, command: CommandObject):
    if not message.reply_to_message:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.")
        return

    try:
        user = message.reply_to_message.from_user
        args = command.args.split()
        if len(args) != 1:
            await message.answer("–§–æ—Ä–º–∞—Ç: /add_member —É—Ä–æ–≤–µ–Ω—å_–¥–æ—Å—Ç—É–ø–∞ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
            return
        
        level = int(args[0])
        if level not in {1, 2, 3}:
            await message.answer("–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: 1 (–Ω–æ–≤–∏—á–æ–∫), 2 (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π), 3 (–ª–∏–¥–µ—Ä)")
            return
        
        cursor.execute(
            "INSERT OR REPLACE INTO members (user_id, username, trust_level) VALUES (?, ?, ?)",
            (user.id, user.username, level))
        conn.commit()
        
        await message.answer(f"@{user.username} –¥–æ–±–∞–≤–ª–µ–Ω —Å —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞ {level}")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: /add_member —É—Ä–æ–≤–µ–Ω—å (1-3) –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("set_level"))
async def set_level(message: Message, command: CommandObject):
    try:
        username, new_level = command.args.split()
        new_level = int(new_level)
        
        if new_level not in {1, 2, 3}:
            await message.answer("–î–æ–ø—É—Å—Ç–∏–º—ã–µ —É—Ä–æ–≤–Ω–∏: 1, 2, 3")
            return

        cursor.execute(
            "UPDATE members SET trust_level = ? WHERE username = ?",
            (new_level, username))
        conn.commit()
        
        if cursor.rowcount == 0:
            await message.answer(f"{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        else:
            await message.answer(f"{username} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —É—Ä–æ–≤–µ–Ω—å {new_level}")
    except:
        await message.answer("–§–æ—Ä–º–∞—Ç: /set_level @username –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å")

async def check_access(username: str, required_level: int) -> bool:
    cursor.execute(
        "SELECT trust_level FROM members WHERE username = ?",
        (username,))
    result = cursor.fetchone()
    return result and result[0] >= required_level

@dp.message(Command("get_coords"))
async def get_coords(message: Message):
    username = message.from_user.username
    
    if not await check_access(username, 2):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    
    cursor.execute("SELECT name, coords FROM coords")
    bases = cursor.fetchall()
    response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã:\n" + "\n".join(f"{name}: {cipher.decrypt(coords.encode()).decode()}" for name, coords in bases)
    await message.answer(response)

@dp.message(Command("members"))
async def list_members(message: Message):
    cursor.execute("SELECT user_id, username, trust_level FROM members ORDER BY trust_level DESC")
    members = cursor.fetchall()
    
    if not members:
        await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    
    active_members = []
    
    for user_id, username, trust_level in members:
        try:
            if not isinstance(user_id, int) or user_id <= 0:
                print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id: {user_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            chat_member = await bot.get_chat_member(chat_id=message.chat.id, user_id=user_id)
            
            if chat_member.status not in ['left', 'kicked']:
                active_members.append((username, trust_level))
            else:
                cursor.execute("DELETE FROM members WHERE user_id = ?", (user_id,))
                conn.commit()
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ –≥—Ä—É–ø–ø–µ.")
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id}): {str(e)}")
            continue
    
    if not active_members:
        await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    
    response = "üìú –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n" + "\n".join(
        f"{username} ‚Äî {['–ù–æ–≤–∏—á–æ–∫', '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π', '–õ–∏–¥–µ—Ä'][level-1]}" 
        for username, level in active_members
    )
    await message.answer(response)

@dp.message(Command("add_coords"))
async def add_coords(message: Message, command: CommandObject):
    if not command.args:
        await message.answer("–ù—É–∂–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã! –ü—Ä–∏–º–µ—Ä: /add_coords –ù–∞–∑–≤–∞–Ω–∏–µ 100 64 200 2")
        return

@dp.callback_query(F.data == "clanguard_menu")
async def clanguard_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", callback_data="add_coords_menu"),
        types.InlineKeyboardButton(text="–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="blacklist_menu")
    )
    await callback.message.edit_text(
        "ClanGuard - –ó–∞—â–∏—Ç–∞ –∫–ª–∞–Ω–∞:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data == "add_coords_menu")
async def add_coords_menu(callback: CallbackQuery):
    await callback.message.answer(
        "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/add_coords –ù–∞–∑–≤–∞–Ω–∏–µ–ë–∞–∑—ã X Y Z –£—Ä–æ–≤–µ–Ω—å–î–æ—Å—Ç—É–ø–∞\n"
        "–ü—Ä–∏–º–µ—Ä: /add_coords MainBase 100 200 300 2"
    )
    await callback.answer()

@dp.message(Command("add_coords"))
async def add_coords_command(message: Message, command: CommandObject):
    try:
        name, x, y, z, access_level = command.args.split()
        encrypted = cipher.encrypt(f"{x} {y} {z}".encode())
        
        cursor.execute(
            "INSERT INTO coords (name, coords, access_level) VALUES (?, ?, ?)",
            (name, encrypted.decode(), int(access_level))
        )
        conn.commit()
        
        await message.answer(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (—Ç—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {access_level})")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_coords –ù–∞–∑–≤–∞–Ω–∏–µ X Y Z –£—Ä–æ–≤–µ–Ω—å –î–æ—Å—Ç—É–ø–∞")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("base"))
async def base(message: Message):
    await message.answer_photo(types.FSInputFile("logo.jpg"))

@dp.message(Command("idea"))
async def idea_command(message: Message, command: CommandObject):
    args = command.args
    with open("ideas_for_base.txt", "a+", encoding="utf-8") as file:
        file.write(f'{message.chat.username} | {args}\n')
    await message.answer('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ')

@dp.callback_query(F.data == "button1")
async def button1(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="–Ω–∞–¥–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å", callback_data="need_build"),
        types.InlineKeyboardButton(text="—É–∂–µ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏", callback_data="already_built"),
        types.InlineKeyboardButton(text="–∏–¥–µ—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–∫", callback_data="idea")
    )
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data == "button2")
async def button2(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="YouTube",
            url="https://www.youtube.com/channel/UCpG0QiByXNvuiFJJYRnMQFQ"
        )
    )
    await callback.message.edit_text(
        "—Å–æ—Ü—Å–µ—Ç–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data == "button3")
async def nickaname(callback: CallbackQuery):
    with open("nickname.txt", "r") as msg:
        otv = msg.read()
    await callback.message.answer(otv)
    await callback.answer()

@dp.callback_query(F.data == "need_build")
async def need_build(callback: CallbackQuery):
    await callback.message.answer("–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞...")
    await callback.answer()

@dp.callback_query(F.data == "already_built")
async def already_built(callback: CallbackQuery):
    await callback.message.answer("–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤...")
    await callback.answer()

@dp.callback_query(F.data == "idea")
async def idea_callback(callback: CallbackQuery):
    await callback.message.answer("–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç –∏–¥–µ—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–∫")     
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())